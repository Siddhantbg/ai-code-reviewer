#!/usr/bin/env python3
"""
Simple verification script to check that optimizations are in place
"""
import sys
import os

# Add backend to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def verify_ai_service_optimizations():
    """Verify AI service has optimization features"""
    print("üîç Verifying AI service optimizations...")
    
    try:
        # Import and check AI service
        from app.services.ai_service import AICodeAnalyzer, CPU_THREADS, CPU_THROTTLE_DELAY
        
        # Check CPU thread reduction
        if CPU_THREADS <= 2:
            print(f"   ‚úÖ CPU threads reduced to {CPU_THREADS} (was 4)")
        else:
            print(f"   ‚ùå CPU threads still high: {CPU_THREADS}")
            return False
        
        # Check throttle delay exists
        if CPU_THROTTLE_DELAY > 0:
            print(f"   ‚úÖ CPU throttling delay added: {CPU_THROTTLE_DELAY}s")
        else:
            print(f"   ‚ùå No CPU throttling delay")
            return False
        
        # Check AI analyzer has new methods
        analyzer = AICodeAnalyzer()
        
        if hasattr(analyzer, '_cleanup_after_analysis'):
            print("   ‚úÖ Memory cleanup method added")
        else:
            print("   ‚ùå Memory cleanup method missing")
            return False
        
        if hasattr(analyzer, 'thread_pool'):
            print("   ‚úÖ Shared thread pool implemented")
        else:
            print("   ‚ùå Shared thread pool missing")
            return False
        
        if hasattr(analyzer, 'last_cleanup_time'):
            print("   ‚úÖ Cleanup tracking added")
        else:
            print("   ‚ùå Cleanup tracking missing")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error verifying AI service: {e}")
        return False

def verify_performance_optimizer():
    """Verify performance optimizer has enhanced features"""
    print("\nüîç Verifying performance optimizer enhancements...")
    
    try:
        from app.utils.performance_optimizer import PerformanceOptimizer
        
        optimizer = PerformanceOptimizer()
        
        # Check reduced limits
        if optimizer.max_concurrent_ai_operations <= 1:
            print(f"   ‚úÖ AI operations limited to {optimizer.max_concurrent_ai_operations}")
        else:
            print(f"   ‚ùå AI operations limit too high: {optimizer.max_concurrent_ai_operations}")
            return False
        
        if optimizer.max_cpu_usage_percent <= 80:
            print(f"   ‚úÖ CPU usage limit reduced to {optimizer.max_cpu_usage_percent}%")
        else:
            print(f"   ‚ùå CPU usage limit too high: {optimizer.max_cpu_usage_percent}%")
            return False
        
        if optimizer.max_memory_usage_mb <= 1536:
            print(f"   ‚úÖ Memory limit reduced to {optimizer.max_memory_usage_mb}MB")
        else:
            print(f"   ‚ùå Memory limit too high: {optimizer.max_memory_usage_mb}MB")
            return False
        
        # Check new cleanup features
        if hasattr(optimizer, 'ai_cleanup_threshold'):
            print("   ‚úÖ AI-specific cleanup threshold added")
        else:
            print("   ‚ùå AI-specific cleanup threshold missing")
            return False
        
        if hasattr(optimizer, '_ai_operation_cleanup'):
            print("   ‚úÖ AI operation cleanup method added")
        else:
            print("   ‚ùå AI operation cleanup method missing")
            return False
        
        if hasattr(optimizer, '_ai_specific_cleanup'):
            print("   ‚úÖ AI-specific cleanup method added")
        else:
            print("   ‚ùå AI-specific cleanup method missing")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error verifying performance optimizer: {e}")
        return False

def verify_resource_monitor():
    """Verify resource monitor has AI tracking"""
    print("\nüîç Verifying resource monitor enhancements...")
    
    try:
        from app.monitoring.resource_monitor import ResourceMonitor
        
        monitor = ResourceMonitor()
        
        # Check AI operation tracking
        if hasattr(monitor, 'active_ai_operations'):
            print("   ‚úÖ AI operation tracking added")
        else:
            print("   ‚ùå AI operation tracking missing")
            return False
        
        if hasattr(monitor, 'ai_operation_times'):
            print("   ‚úÖ AI operation timing added")
        else:
            print("   ‚ùå AI operation timing missing")
            return False
        
        if hasattr(monitor, 'update_ai_operation_count'):
            print("   ‚úÖ AI operation count method added")
        else:
            print("   ‚ùå AI operation count method missing")
            return False
        
        if hasattr(monitor, 'record_ai_operation_time'):
            print("   ‚úÖ AI operation time recording added")
        else:
            print("   ‚ùå AI operation time recording missing")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error verifying resource monitor: {e}")
        return False

def main():
    """Main verification function"""
    print("üöÄ Verifying AI processing optimizations...\n")
    
    ai_service_ok = verify_ai_service_optimizations()
    performance_ok = verify_performance_optimizer()
    monitor_ok = verify_resource_monitor()
    
    print(f"\nüèÅ Verification Results:")
    print(f"   AI Service Optimizations: {'‚úÖ PASS' if ai_service_ok else '‚ùå FAIL'}")
    print(f"   Performance Optimizer: {'‚úÖ PASS' if performance_ok else '‚ùå FAIL'}")
    print(f"   Resource Monitor: {'‚úÖ PASS' if monitor_ok else '‚ùå FAIL'}")
    
    all_ok = ai_service_ok and performance_ok and monitor_ok
    print(f"   Overall: {'üéâ ALL VERIFICATIONS PASSED' if all_ok else '‚ö†Ô∏è SOME VERIFICATIONS FAILED'}")
    
    if all_ok:
        print("\nüìã Optimization Summary:")
        print("   ‚úÖ CPU threads reduced from 4 to 2")
        print("   ‚úÖ CPU throttling delays added")
        print("   ‚úÖ Memory cleanup after AI operations")
        print("   ‚úÖ Shared thread pool to reduce overhead")
        print("   ‚úÖ AI operation limits reduced")
        print("   ‚úÖ Memory and CPU usage limits lowered")
        print("   ‚úÖ Enhanced resource monitoring")
        print("   ‚úÖ AI-specific cleanup routines")
        print("\nüéØ Expected impact:")
        print("   - CPU usage should be reduced by ~50%")
        print("   - Memory usage should be more stable")
        print("   - Better resource cleanup after operations")
        print("   - Improved system responsiveness")
    
    return all_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)